Resources:
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ${self:custom.images.${opt:stage, "london"}}
      # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type Free Tier, eu-west-2 image
      #    touch ~/.bash_profile
      #    curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
      #    source ~/.bashrc
      #    nvm install node
      #    nvm install 21.1.0
      #    nvm use 21.1.0

      KeyName: vpnkey # key are only unique to one region
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          hostnamectl set-hostname $(curl http://checkip.amazonaws.com)

          apt-get update -y
          apt-get install -y awscli
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
          apt -y install ca-certificates wget net-tools gnupg
          wget -qO - https://as-repository.openvpn.net/as-repo-public.gpg | apt-key add -
          echo "deb http://as-repository.openvpn.net/as/debian focal main">/etc/apt/sources.list.d/openvpn-as-repo.list
          apt update

          apt-get update
          apt-get install -y ca-certificates curl gnupg
          apt  install tree
          apt install -y nginx
          ufw allow 'Nginx Full'

          mkdir -p /etc/apt/keyrings
          curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
          NODE_MAJOR=20
          echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
          apt-get update
          apt-get install nodejs -y
          apt install unzip
          npm install pm2@latest -g

          cat > /tmp/mypy.py <<'EOF'
          ${file(scripts/mypy.py)}
          EOF

          apt -y install openvpn-as
          aws sns publish --topic-arn arn:aws:sns:eu-west-2:${aws:accountId}:snsPublishEC2Ip --region eu-west-2 --message {"https://$(curl https://checkip.amazonaws.com)"}

          sed -i 's/dest="ec2",/dest="ec2", default=True,/g' /usr/local/openvpn_as/bin/_ovpn-init
          sed -i "s/passw = esc_str/passw = \"\" #/g" /usr/local/openvpn_as/bin/_ovpn-init
          sed -i '899i\    new_state = SubscriptionTracking2()\n    subhelper.state = new_state' /usr/local/openvpn_as/bin/_ovpn-init
          cat /tmp/mypy.py >> /usr/local/openvpn_as/bin/_ovpn-init
          sed -i "s/SubscriptionHelper()/SubscriptionHelper2()/g" /usr/local/openvpn_as/bin/_ovpn-init

          ln -s /usr/local/openvpn_as/bin/ /usr/local/bin/ovpn-manual-configure
          ln -s /usr/local/openvpn_as/scripts/ /usr/local/bin/openvpn-scripts

          echo 'sacli --user test1 --key "type" --value "user_connect" UserPropPut' >> ~/new_user.sh
          echo 'sacli --user test1 --new_pass test1 SetLocalPassword' >> ~/new_user.sh
          echo 'sacli --user test1 --key "prop_autologin" --value "true" UserPropPut' >> ~/new_user.sh
          echo 'sacli --user test1 --key "prop_superuser" --value "true" UserPropPut' >> ~/new_user.sh
          echo 'sacli start' >> ~/new_user.sh

          chmod 755 ~/new_user.sh
          printf 'DELETE\nyes\nyes\n1\nrsa\n2048\nrsa\n2048\n943\n443\nyes\nyes\nyes\nyes\n\nyes\n' | ovpn-init && ~/new_user.sh

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}

          service awslogs stop
      SecurityGroupIds:
        - !Ref OpenVPNSecurityGroup 
      Tags:
        - Key: Name
          Value: free-vpn
        - Key: Type
          Value: Serverless Creation
